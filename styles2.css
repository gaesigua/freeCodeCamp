h1, h2, p {
    text-align: center;
}
/* STEP 18, 19: Add another style to the file that changes the background-color property to brown for the body element.
                Since the brown background makes it hard to read the text, let's change it to burlywood so the background has some color but you are still able to read the text */
/* STEP 22: Comment here */
/* STEP 28: STEP 28: Since the cafe's main product for sale is coffee, you could use an image of coffee beans for the background of the page. Delete the comment and its contents inside the body type selector. Now add a background-image property and set its value to an image */
/* STEP 57: You can change the font-family of text, to make it look different from the default font of your browser. Each browser has some common fonts available to it. Change all the text in your body, by adding a font-family property with the value sans-serif. This is a fairly common font that is very readable. */

/* Step 72: To create a little more room around the menu, add 20px of space on the inside of the body element by using the padding property. */
body {
    background-image: url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg);
    font-family: sans-serif;
    padding: 20px;
}
/* STEP 58: It is a bit boring for all the text to have the same font-family. You can still have the majority of the text sans-serif and make just the h1 and h2 elements different using a different selector. Style both the h1 and the h2 elements using a single selector so that these elements' text use Impact font. */
/* STEP 59: You can add a fallback value for the font-family by adding another font name separated by a comma. Fallbacks are used in instances where the initial is not found/available. Add the fallback font serif after the Impact font. */
h1, h2{
    font-family: Impact, serif;
}
/* STEP 21: let's use the #menu selector to give your element a width of 300px*/

/* STEP 23: Now use the existing #menu selector to set the background color of the div element to be burlywood. */
/* STEP 24: Let's change the width property's value to be 80%, to make it 80% the width of its parent element (body). */

/* Step 25: Next, you want to center the #menu horizontally. You can do this by setting its margin-left and margin-right properties to auto. Think of the margin as invisible space around an element. Using these two margin properties, center the #menu element within the body element. */
/* STEP 27: Change the existing #menu selector into a class selector by replacing #menu with a class named .menu. to apply the class's styling to the div elemnt. */
/* STEP 53: You can give your menu some space between the content and the sides with various padding properties. Give the menu class a padding-left and a padding-right with the same value 20px. */
/* STEP 54: Step 54: That looks better. Now try to add the same 20px padding to the top and bottom of the menu. */
/* STEP 55: Since all 4 sides of the menu have the same internal spacing, go ahead and delete the four properties and use a single padding property with the value 20px. */
/* STEP 56: The current width of the menu will always take up 80% of the body element's width. On a very wide screen, the coffee and dessert appear far apart from their prices. Add a max-width property to the menu class with a value of 500px to prevent it from growing too wide. */
.menu {
    width: 80%;
    background-color: burlywood;
    margin-left: auto;
    margin-right: auto;
    padding: 20px;
    max-width: 500px;
}
/* STEP 33: Step 33: Using your new flavor class as a selector, set the text-align property's value to left. */
/* STEP 38: Step 38: That's closer, but the price didn't stay over on the right. This is because inline-block elements only take up the width of their content. To spread them out, add a width property to the flavor and price class selectors that have a value of 50% each. */
/* STEP 39: Step 39: Well that did not work. Styling the p elements as inline-block and placing them on separate lines in the code creates an extra space to the right of the first p element, causing the second one to shift to the next line. White space characters can cause this issue as well. One way to fix this is to make each p element's width a little less than 50%. Change the width value to 49% for each class to see what happens. */
/* STEP 41: Now go ahead and change both the flavor and price class' widths to be 50% again. */
.flavor, .dessert {
    text-align: left;
    width: 75%;
    
}
/* STEP 35: Step 35: Now align the text to the right for the elements with the price class. */
/* STEP 45: Step 45: If you make the width of the page preview smaller, you will notice at some point, some of the text on the left starts wrapping around to the next line. This is because the width of the p elements on the left side can only take up 50% of the space. Since you know the prices on the right have significantly fewer characters, change the flavor class width value to be 75% and the price class width value to be 25%. */
.price {
    text-align: right;
    width: 25%;
}
/* STEP 37: The p elements are nested in an article element with the class attribute of item. You can style all the p elements nested anywhere in elements with a class named item like this: .item p {} */
/* Step 73: Focusing on the menu items and prices, there is a fairly large gap between each line. Use the existing selector that targets all the p elements nested in elements with the class named item and set their top and bottom margin to be 5px. */
/* Step 74: Using the same style selector in the previous step, make the font size of the items and prices larger by using a value of 18px. */
.item p {
    display: inline-block;
    margin-top: 5px;
    margin-bottom: 5px;
    font-size: 18px;
}
/* Step 51: Something does not look right. You added the correct class attribute value to the p element with Donut as its text, but you have not defined a selector for it. 
The CSS rule for the flavor class already sets the properties you want. Add the dessert class as an additional selector for this CSS rule. */
/* STEP 60: Make the Est. 2020 text italicized by creating an established class selector and giving it the font-style property with the value italic. */
.established{
    font-style: italic;
}
/* Step 62: The typography of heading elements (e.g. h1, h2) is set by default values of users' browsers.
Add two new type selectors (h1 and h2). Use the font-size property for both, but use the value 40px for the h1 and 30px for the h2. */
/* Step 84: The menu text CAMPER CAFE has a different space from the top than the address's space at the bottom of the menu. This is due to the browser having some default top margin for the h1 element. Change the top margin of the h1 element to 0 to remove all the top margin. */
/* Step 85: To remove some of the vertical space between the h1 element and the text Est. 2020, change the bottom margin of the h1 to 15px. */

h1{
    font-size: 40px;
    margin-top: 0;
    margin-bottom: 15px;
}
h2{
    font-size: 30px;
}
/* Step 67: The default properties of an hr element will make it appear as a thin light grey line. You can change the height of the line by specifying a value for the height property; Let's Change the height of the hr element to be 3px. */
/* Step 68: Let's change the background color of the hr element to brown so it matches the color of the coffee beans. */
/* Step 69: Notice the grey color along the edges of the line. Those edges are known as borders. Each side of an element can have a different color or they can all be the same. Make all the edges of the hr element the same color as the background of it using the border-color property. */
/* Step 70: Notice how the thickness of the line looks bigger? The default value of a property named border-width is 1px for all edges of hr elements. By changing the border to the same color as the background, the total height of the line is 5px (3px plus the top and bottom border width of 1px).
Change the height property of the hr to be 2px, so the total height of it becomes 4px. */
hr{
    height: 2px;
    background-color: brown;
    border-color: brown;
}
/* Step 75: Changing the margin-bottom to 5px looks great. However, now the space between the Cinnamon Roll menu item and the second hr element does not match the space between the top hr element and the Coffee heading. Add some more space by creating a class named bottom-line using 25px for the margin-top property. */
.bottom-line{
    margin-top: 25px;
}
/* Step 77: Next you are going to be styling the footer element. To keep the CSS organized, add a comment at the end of styles.css with the text FOOTER. */

/* FOOTER */
footer{
    font-size: 14px;
}

/* Step 79: The default color of a link that has not yet been clicked on is typically blue. The default color of a link that has already been visited from a page is typically purple.
To make the footer links the same color regardless if a link has been visited, use a type selector for the anchor element (a) and use the value black for the color property. */
a {
    color: black;
}

/* Step 80: You change properties of a link when the link has actually been visited by using a pseudo-selector that looks like a:visited { propertyName: propertyValue; }.
Change the color of the footer Visit our website link to be grey when a user has visited the link. */
/* Step 83: To keep with the same color theme you have already been using (black and brown), change the color for when the link is visited to black and use brown for when the link is actually clicked. */
a:visited {
    color: black;
}

/* Step 81: You change properties of a link when the mouse hovers over them by using a pseudo-selector that looks like a:hover { propertyName: propertyValue; }. Change the color of the footer Visit our website link to be brown when a user hovers over it. */
a:hover{
    color: brown;

}
/* Step 82: You change properties of a link when the link is actually being clicked by using a pseudo-selector that looks like a:active { propertyName: propertyValue; }. Change the color of the footer Visit our website link to be white when clicked on. */
a:active{
    color: brown;
}
/* Step 86: Now the top spacing looks good. The space below the address at the bottom of the menu is a little bigger than the space at the top of the menu and the h1 element. To decrease the default margin space below the address p element, create a class selector named address and use the value 5px for the margin-bottom property. */
.address{
    margin-bottom: 5px;
}
/* Step 89: The image you added is not centered horizontally like the Coffee heading above it. img elements are "like" inline elements. To make the image behave like heading elements (which are block-level), create an img type selector and use the value block for the display property and use the applicable margin-left and margin-right values to center it horizontally. */
/* Step 91: It would be nice if the vertical space between the h2 elements and their associated icons was smaller. The h2 elements have default top and bottom margin space, so you could change the bottom margin of the h2 elements to say 0 or another number. There is an easier way, simply add a negative top margin to the img elements to pull them up from their current positions. Negative values are created using a - in front of the value. To complete this project, go ahead and use a negative top margin of 25px in the img type selector. */
img{
    display: block;
    margin-left: auto;
    margin-right: auto;
    margin-top: -25px;
}         